"""#### Import Libraries"""
import random
import os
from datetime import date, timedelta, datetime
import pickle

import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

"""#### Constants"""
SEED = 2019

WORKING_DIR = '.'

DATA_PATH = os.path.join(WORKING_DIR, 'data')
KAGGLE_DATA_PATH = os.path.join(DATA_PATH, 'train.csv')
ORIGIN_DATA_PATH = os.path.join(DATA_PATH, 'origin.csv')
TRAIN_DATA_PATH = os.path.join(DATA_PATH, 'train.csv')
TEST_DATA_PATH = os.path.join(DATA_PATH, 'test.csv')
SAMPLE_TRAIN_DATA_PATH = os.path.join(DATA_PATH, 'sample_train.csv')
SAMPLE_TEST_DATA_PATH = os.path.join(DATA_PATH, 'sample_test.csv')

IMAGE_DIRECTORY = os.path.join(WORKING_DIR, 'images')
RESULT_DIRECTORY = os.path.join(WORKING_DIR, 'results')

DIRECTORY_TO_CHECK = [IMAGE_DIRECTORY, RESULT_DIRECTORY]

LOAD_TYPES = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }
# WEEK_MAP = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}

# """ Utility Functions """
def current_time():
    return str(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

def print_title(title):
    print()
    print('='*5, title, '='*5)

def print_info(info):
    print("{:<6} {}: {}".format('[INFO]', current_time(), info))

def check_dir(directory):
    if not os.path.exists(directory):
        check_dir(os.path.dirname(directory))
        os.mkdir(directory)
        print_info('Make directory: {}'.format(directory))

for dir in DIRECTORY_TO_CHECK:
    check_dir(dir)

# def save_obj(obj, name):
#     with open(os.path.join(TRAIN_RESULT_PATH, name + '.pkl'), 'wb') as f:
#         pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
#
# def load_obj(name):
#     with open(os.path.join(TRAIN_KEEP_PATH, name + '.pkl'), 'rb') as f:
#         return pickle.load(f)
#
# def convert_filename(filename):
#     for unacceptable in [' ', ':', '.', '(', ')']:
#         filename = filename.replace(unacceptable, '_')
#     return filename
#
# """Check Data"""
# def display_null_percentage(data):
#     df = data.isnull().sum().reset_index().rename(columns = {0: 'Count', 'index': 'Column'})
#     df['Frequency'] = df['Count'] / data.shape[0] * 100
#     pd.options.display.float_format = '{:.2f}%'.format
#     print(df)
#     pd.options.display.float_format = None
#
# def display_category_counts(data, categorical_features):
#   for categorical_feature in categorical_features:
#     print('-' * 30)
#     print(categorical_feature)
#     print(data[categorical_feature].value_counts(dropna=False))
#
# def get_percentage(data, column):
#     count_df = data[column].value_counts().reset_index().rename(columns = {column: 'Count', 'index': column})
#     count_df['%'] = count_df['Count'] / data.shape[0]
#     return count_df
