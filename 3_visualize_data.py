# Setting
SAMPLE = True

# Import libraries
from setting import *
from util import *

import os
import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Set display options
pd.options.display.max_rows = 100
pd.options.display.max_columns = 100
pd.options.display.width = 1000

# Set Global Random Seed -------------------------------------------------------
print_title('Set Global Random Seed')
np.random.seed(SEED)
print_info('Set global random seed to {}'.format(SEED))

# Load data --------------------------------------------------------------------
print_title('Load Data')
print_info('Start loading data')

if SAMPLE:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, nrows = 10000, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')
else:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')

print_info('Finish loading data')

# Analysis Data -------------------------------------------------------------
# for feature in NUMERICAL_FEATURES:
#     plot_continuous_distribution_as_box(origin_data, feature, save_directory = ANALYSIS_IMAGE_DIRECTORY)
#     plot_continuous_distribution_as_histogram(origin_data, feature, save_directory = ANALYSIS_IMAGE_DIRECTORY)
#
# for feature in NUMERICAL_FEATURES:
#     plot_continuous_distribution_as_box(origin_data, feature, category_column = TARGET,save_directory = ANALYSIS_IMAGE_DIRECTORY)


category_column = 'Census_ProcessorClass'
data = origin_data
target = TARGET
cut = 12
save_directory = ANALYSIS_IMAGE_DIRECTORY
title = None
show = True

data = data[[category_column, target]]
data[category_column] = data[category_column].astype('str')

freq_df = (data[category_column].value_counts(dropna=False) / data.shape[0]*100).reset_index()
freq_df.columns = [category_column, 'Frequency %']
rate_df = data.groupby([category_column])[target].mean().reset_index()
rate_df.columns = [category_column, target + ' Rate']
df = freq_df.merge(rate_df)
df = df.sort_values('Frequency %', ascending = False)[:cut]
df[category_column] = df[category_column].replace('nan', 'NA')

# plot density and detection rate
fig = plt.figure(1, facecolor='w', figsize=(PLOT_HEIGHT * 3, PLOT_HEIGHT))
ax1 = fig.add_subplot(1,1,1)
ax1.bar(list(df[category_column]),list(df['Frequency %']),color='c', label = 'Frequency %')
ax2 = ax1.twinx()
ax2.plot(list(df[category_column]),list(df[target + ' Rate']), color = 'black', marker = 'o', linestyle='dashed', lw = 2, label = target+' Rate')
ax2.spines['left'].set_color('c')
ax2.set_ylabel(target+ ' Rate', color='k')
ax2.yaxis.label.set_color('k')
ax2.yaxis.label.set_fontsize(20)
for label in ax2.yaxis.get_majorticklabels():
    label.set_fontsize(16)
ax1.spines['left'].set_color('c')
ax1.set_ylabel('Frequency %', color='c')
ax1.yaxis.label.set_color('c')
ax1.yaxis.label.set_fontsize(20)
ax1.tick_params(axis='y', colors='c', labelsize=16)
ax1.tick_params(axis='x', colors='k', labelsize=16)
# y = [data[target].mean()] * df.shape[0]
# plt.plot(df[category_column], y, 'r:', linewidth = 2)
# fig.legend(fontsize = 16)

if title is None:
    title = category_column
plt.title(title, loc = 'center', y=1.1, fontsize = 25)
plt.tight_layout()

if save_directory:
    check_dir(save_directory)
    check_dir(os.path.join(save_directory, 'freq_rate'))
    saved_path = os.path.join(save_directory, 'freq_rate', convert_filename(title))
    fig.savefig(saved_path, dpi=200, bbox_inches="tight", facecolor = 'white')
    print('Saved to {}'.format(saved_path))
if show:
    plt.show()

plt.close()
