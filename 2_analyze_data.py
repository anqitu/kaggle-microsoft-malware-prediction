# Setting
SAMPLE = True

# Import libraries
from setting import *
from util import *

import os
import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Set display options
pd.options.display.max_rows = 100
pd.options.display.max_columns = 100
pd.options.display.width = 1000

# Set Global Random Seed ---------------------------------------------------
print_title('Set Global Random Seed')
np.random.seed(SEED)
print_info('Set global random seed to {}'.format(SEED))

# Load data -----------------------------------------------------------------
print_title('Load Data')
print_info('Start loading data')

if SAMPLE:
    origin_data = pd.read_csv(SAMPLE_TRAIN_DATA_PATH, dtype=LOAD_TYPES)

    # train = pd.read_csv(SAMPLE_TRAIN_DATA_PATH, dtype=LOAD_TYPES)
    # test = pd.read_csv(SAMPLE_TEST_DATA_PATH, dtype=LOAD_TYPES)
else:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, dtype=ORIGIN_LOAD_TYPES)
    origin_data['MachineIdentifier'] = origin_data_df.index.astype('uint32')

    # train = pd.read_csv(TRAIN_DATA_PATH, dtype=LOAD_TYPES)
    # test = pd.read_csv(TEST_DATA_PATH, dtype=LOAD_TYPES)

print_info('Finish loading data')

# Overview Data -------------------------------------------------------------
print_title('Overview Data')
origin_data.head()

# Check missing values
print_sub_title('Missing values')
missing_percentage_df = get_null_percentage(origin_data)
missing_percentage_df.to_csv(os.path.join(RESULT_DIRECTORY, 'check_missing_values.csv'), index = False)
print(missing_percentage_df)

# Check duplicated values
print_sub_title('Duplicated values')
all_columns = list(origin_data.columns)
all_columns.remove('MachineIdentifier')
duplicates_df = origin_data[origin_data.duplicated(subset = origin_data.columns)]
duplicates_df.to_csv(os.path.join(RESULT_DIRECTORY, 'check_duplicates.csv'), index = False)
print_info('Count of duplicated records: {}'.format(duplicates_df.shape[0]))

# Checking category counts
print_sub_title('Category counts')
print(display_category_counts(origin_data, CATEGORICAL_FEATURES))
