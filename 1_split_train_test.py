# Import libraries
from setting import *
from util import *

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Setting Global Random Seed ---------------------------------------------------
print_title('Setting Global Random Seed')
np.random.seed(SEED)
print('Set global random seed to {}'.format(SEED))

# Renaming File ----------------------------------------------------------------
print_title('Renaming File')
if not os.path.isfile(ORIGIN_DATA_PATH):
    if os.path.isfile(KAGGLE_DATA_PATH):
        os.rename(KAGGLE_DATA_PATH, ORIGIN_DATA_PATH)
        print_info("Renamed '{}' to '{}'".format(KAGGLE_DATA_PATH, ORIGIN_DATA_PATH))
    else:
        print_info("File '{}' does not exist.".format(KAGGLE_DATA_PATH))
        print_info("Please download it according to the instructions in README.md")
        quit()
else:
    print_info("You have already renamed '{}' to '{}'".format(KAGGLE_DATA_PATH, ORIGIN_DATA_PATH))


# Loading data -----------------------------------------------------------------
print_title('Loading Data')
print_info('Start loading data')
origin_data_df = pd.read_csv(ORIGIN_DATA_PATH, dtype=ORIGIN_LOAD_TYPES)
origin_data_df['MachineIdentifier'] = origin_data_df.index.astype('uint32')

# Splitting Train and Test -----------------------------------------------------
print_title('Splitting Train and Test')
print_info('Start splitting data')
train, test = train_test_split(origin_data_df, test_size=0.33, stratify = origin_data_df['HasDetections'])

# Saving Train and Test --------------------------------------------------------
print_title('Saving Train and Test')
print_info('Start saving data')
train.to_csv(TRAIN_DATA_PATH, index = False)
test.to_csv(TEST_DATA_PATH, index = False)

# Saving Sample Train and Sample Test --------------------------------------------
print_title('Saving Sample Train and Sample Test')
print_info('Start saving sample data')

others, sample_train = train_test_split(train, test_size=0.01, stratify = train['HasDetections'])
sample_train.to_csv(SAMPLE_TRAIN_DATA_PATH, index = False)

others, sample_test = train_test_split(test, test_size=0.01, stratify = test['HasDetections'])
sample_test.to_csv(SAMPLE_TEST_DATA_PATH, index = False)
