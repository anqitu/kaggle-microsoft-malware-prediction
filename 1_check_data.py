# Setting
SAMPLE = True

# Import libraries
from setting import *
from util import *

import os
import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Set display options
pd.options.display.max_rows = 100
pd.options.display.max_columns = 100
pd.options.display.width = 1000

# Set Global Random Seed ---------------------------------------------------
print_title('Set Global Random Seed')
np.random.seed(SEED)
print_info('Set global random seed to {}'.format(SEED))

# Load data -----------------------------------------------------------------
print_title('Load Data')
print_info('Start loading data')

if SAMPLE:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, nrows = 10000, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')
else:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')

print_info('Finish loading data')

# Overview Data -------------------------------------------------------------
print_title('Overview Data')
# origin_data.head()

print_sub_title('Data Summary')
print_info('Shape of origin data: {}'.format(origin_data.shape)) #(8921483, 83)
summary_df = origin_data.describe(include = 'all')
summary_df = summary_df.transpose()
summary_df.index.name = 'Column'
summary_df['count'] = summary_df['count'].astype(int)
summary_df.to_csv(os.path.join(CHECK_DATA_DIRECTORY, 'data_description.csv'), index = True)

numeric_summary_df = origin_data[NUMERICAL_FEATURES].describe()
numeric_summary_df = numeric_summary_df.transpose()
numeric_summary_df.index.name = 'Column'
numeric_summary_df.to_csv(os.path.join(CHECK_DATA_DIRECTORY, 'data_description_numeric.csv'), index = True)
# len(USELESS_FEATURES + NUMERICAL_FEATURES + CATEGORICAL_FEATURES)

# Check Data Quality -----------------------------------------------------------
print_title('Check Data Quality')

print_sub_title('Missing values')
missing_percentage_df = get_null_percentage(origin_data)
missing_percentage_df = missing_percentage_df.set_index('Column')
summary_df = pd.concat([summary_df, missing_percentage_df], axis = 1)
missing_percentage_df.to_csv(os.path.join(CHECK_DATA_DIRECTORY, 'missing_values.csv'), index = True)
summary_df.to_csv(os.path.join(CHECK_DATA_DIRECTORY, 'data_summary.csv'), index = True)
print(summary_df)

print_sub_title('Duplicated values')
all_columns = list(origin_data.columns)
all_columns.remove('MachineIdentifier')
duplicates_df = origin_data[origin_data.duplicated(subset = origin_data.columns)]
duplicates_df.to_csv(os.path.join(CHECK_DATA_DIRECTORY, 'duplicates.csv'), index = False)
print_info('Count of duplicated records: {}'.format(duplicates_df.shape[0]))

print_sub_title('Outliers')
for feature in NUMERICAL_FEATURES:
    plot_continuous_distribution_as_box(origin_data, feature, save_directory = CHECK_DATA_IMAGE_DIRECTORY, show = False)
    plot_continuous_distribution_as_histogram(origin_data, feature, save_directory = CHECK_DATA_IMAGE_DIRECTORY, show = False)

print_sub_title('Category counts')
display_category_counts(origin_data, CATEGORICAL_FEATURES, os.path.join(CHECK_DATA_DIRECTORY, 'category_counts'), is_print = False)
display_category_counts(origin_data, NUMERICAL_FEATURES, os.path.join(CHECK_DATA_DIRECTORY, 'category_counts'), is_print = False)
