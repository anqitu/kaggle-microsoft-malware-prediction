"""#### Import Libraries"""
import random
import os
from datetime import date, timedelta, datetime
import pickle

import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

"""#### Constants"""
WORKING_DIR = '.'
DATA_PATH = os.path.join(WORKING_DIR, 'data')
TRAIN_DATA_PATH = os.path.join(DATA_PATH, 'train.csv') # 125497041 rows  2013-01-01 to 2017-08-15
TEST_DATA_PATH = os.path.join(DATA_PATH, 'test.csv') # 2017-08-16 to 2017-08-31
HOLIDAY_DATA_PATH = os.path.join(DATA_PATH, 'holidays_events.csv')
ITEMS_DATA_PATH = os.path.join(DATA_PATH, 'items.csv')
OIL_DATA_PATH = os.path.join(DATA_PATH, 'oil.csv')
STORES_DATA_PATH = os.path.join(DATA_PATH, 'stores.csv')
TRANSACTIONS_DATA_PATH = os.path.join(DATA_PATH, 'transactions.csv')
SAMPLE_SUBMISSION_DATA_PATH = os.path.join(DATA_PATH, 'sample_submission.csv')

TRAIN_DATA_PATH_SAMPLE_item30 = os.path.join(DATA_PATH, 'train_sample_item30.csv')

IMAGE_DIRECTORY = os.path.join(WORKING_DIR, 'images')
TRAIN_RESULT_PATH = os.path.join(WORKING_DIR, 'results')
IMAGE_MODEL_DIRECTORY = os.path.join(IMAGE_DIRECTORY, 'model')
SUBMISSION_DIRECTORY = os.path.join(WORKING_DIR, 'submission')

LOAD_TYPES = {'id': 'int64', 'item_nbr': 'int32', 'store_nbr': 'int8', 'unit_sales': 'float32', 'onpromotion': bool}
WEEK_MAP = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}

""" Utility Functions """
def convert_date_to_string(date, dow = False):
    date_str = str(date).replace(' 00:00:00', '')
    if dow:
        date_str += ' ({})'.format(WEEK_MAP[date.weekday()][:3])
    return date_str

def check_dir(directory):
    if not os.path.exists(directory):
        check_dir(os.path.dirname(directory))
        os.mkdir(directory)
        print("{:<6} Make directory: {}".format('[INFO]', directory))

for dir in [IMAGE_DIRECTORY, TRAIN_RESULT_PATH, IMAGE_MODEL_DIRECTORY, SUBMISSION_DIRECTORY]:
    check_dir(dir)

def current_time():
    return str(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

def save_obj(obj, name):
    with open(os.path.join(TRAIN_RESULT_PATH, name + '.pkl'), 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

def load_obj(name):
    with open(os.path.join(TRAIN_KEEP_PATH, name + '.pkl'), 'rb') as f:
        return pickle.load(f)

def convert_filename(filename):
    for unacceptable in [' ', ':', '.', '(', ')']:
        filename = filename.replace(unacceptable, '_')
    return filename

"""Check Data"""
def display_null_percentage(data):
    df = data.isnull().sum().reset_index().rename(columns = {0: 'Count', 'index': 'Column'})
    df['Frequency'] = df['Count'] / data.shape[0] * 100
    pd.options.display.float_format = '{:.2f}%'.format
    print(df)
    pd.options.display.float_format = None

def display_category_counts(data, categorical_features):
  for categorical_feature in categorical_features:
    print('-' * 30)
    print(categorical_feature)
    print(data[categorical_feature].value_counts(dropna=False))

def get_percentage(data, column):
    count_df = data[column].value_counts().reset_index().rename(columns = {column: 'Count', 'index': column})
    count_df['%'] = count_df['Count'] / data.shape[0]
    return count_df
