"""
Benchmark
- Most recent day
- Most recent weekofday
"""

""" import libraries """
import numpy as np
import pandas as pd
import datetime
from datetime import date, timedelta
from util import *
from tqdm import tqdm
import gc

""" Ignore warnings """
import warnings
warnings.filterwarnings('ignore')


""" Setting """
SAMPLE = False
if SAMPLE:
    TRAIN_DATA_PATH_aft2017_all = TRAIN_DATA_PATH_aft2017_SAMPLE_item30
    TEST_DATA_PATH = VAL_DATA_PATH_SAMPLE_item30


""" Load Data
- Create observations for unseen items
"""
print('{}: Start reading data'.format(current_time()))
train_all = pd.read_csv(TRAIN_DATA_PATH_aft2017_all, dtype=LOAD_TYPES, parse_dates=["date"])
sales = train_all.set_index(["store_nbr", "item_nbr", "date"])[["unit_sales"]].unstack(level=-1).fillna(0)
sales.columns = sales.columns.get_level_values(1)
del train_all
gc.collect()

test = pd.read_csv(TEST_DATA_PATH, dtype=LOAD_TYPES, parse_dates=["date"])
if SAMPLE:
    test = test.reset_index().rename(columns = {'index': 'id'})

items = pd.read_csv(ITEMS_DATA_PATH)
items = items.set_index("item_nbr").reindex(sales.index.get_level_values(1)).reset_index()
print('{}: Finish reading data'.format(current_time()))

""" Date Range Constant """
T_TEST_START = test['date'].min()
T_TEST_END = test['date'].max()
print('T_TEST_START: {}'.format(convert_date_to_string(T_TEST_START, dow = True)))
print('T_TEST_END: {}'.format(convert_date_to_string(T_TEST_END, dow = True)))
T_VAL_START = T_TEST_START - timedelta(days=7 * 3)
T_VAL_END = T_TEST_END - timedelta(days=7 * 3)
print('T_VAL_START: {}'.format(convert_date_to_string(T_VAL_START, dow = True)))
print('T_VAL_END: {}'.format(convert_date_to_string(T_VAL_END, dow = True)))

""" Result Processing Functions """
def calculate_nwrmsle(y_true, y_pred, num_week = 1):
    weight = pd.concat([items["perishable"]] * num_week) * 0.25 + 1
    err = (y_true - np.array(y_pred).transpose())**2
    err_all = np.sqrt((err.sum(axis=1) * weight).sum() / weight.sum() / 16)
    err_by_day = pd.DataFrame({i: [np.sqrt((err[:, i] * weight).sum() / weight.sum())] for i in range(16)}).transpose()
    err_by_day.loc['All'] = err_all
    return err_by_day.rename(columns = {0: 'Val NWRMSLE'})

def prepare_preds_df(y_pred, t_start):
    pred_df = pd.DataFrame(np.array(y_pred).transpose(), index=sales.index, columns=pd.date_range(t_start, periods=16)).stack().to_frame("unit_sales")
    pred_df.index.set_names(["store_nbr", "item_nbr", "date"], inplace=True)
    pred_df["unit_sales"] = np.clip(np.expm1(pred_df["unit_sales"]), 0, 1000)
    return pred_df

def make_submission(test_pred, t_start, path):
    pred_df = prepare_preds_df(test_pred, t_start)
    submission = test.set_index(["store_nbr", "item_nbr", "date"])[["id"]].join(pred_df, how="left").fillna(0)
    submission.to_csv(path, index = False)
    print('{}: Saved submission to {}'.format(current_time(), path))

y_val = sales[pd.date_range(T_VAL_START, periods=16, freq='D')].values
""" Most recent day """
val_sales_recent_day = sales[T_VAL_START - timedelta(days=1)]
val_pred_recent_day = [val_sales_recent_day] * 16
calculate_nwrmsle(y_val, val_pred_recent_day, 1)

test_sales_recent_day = sales[T_TEST_START - timedelta(days=1)]
test_pred_recent_day = [test_sales_recent_day] * 16
make_submission(test_pred_recent_day, T_TEST_START, path = 'submission/benchmark_recent_day.csv')

""" Most recent dayofweek """
val_pred_recent_dayofweek = []
for i in range(16):
    val_pred_recent_dayofweek.append(sales[T_VAL_START - timedelta(days=7 - i%7)])
calculate_nwrmsle(y_val, val_pred_recent_dayofweek, 1)

test_pred_recent_dayofweek = []
for i in range(16):
    test_pred_recent_dayofweek.append(sales[T_TEST_START - timedelta(days=7 - i%7)])
make_submission(test_pred_recent_dayofweek, T_TEST_START, path = 'submission/benchmark_recent_dayofweek.csv')
