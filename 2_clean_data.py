# Setting
SAMPLE = True

# Import libraries
from setting import *
from util import *

import os
import numpy as np
import pandas as pd

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Set display options
pd.options.display.max_rows = 100
pd.options.display.max_columns = 100
pd.options.display.width = 1000

# Set Global Random Seed -------------------------------------------------------
print_title('Set Global Random Seed')
np.random.seed(SEED)
print_info('Set global random seed to {}'.format(SEED))

# Load data --------------------------------------------------------------------
print_title('Load Data')
print_info('Start loading data')

if SAMPLE:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, nrows = 10000, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')
else:
    origin_data = pd.read_csv(ORIGIN_DATA_PATH, dtype=ORIGIN_LOAD_TYPES)
    # origin_data['MachineIdentifier'] = origin_data.index.astype('uint32')

print_info('Finish loading data')

# Handle Missing Values ---------------------------------------------------------------
print_title('Handle Missing Values')

# RtpStateBitfield
print_info("RtpStateBitfield (0.36% Missing) - Fill missing values by mode")
origin_data['RtpStateBitfield'] = origin_data['RtpStateBitfield'].fillna(origin_data['RtpStateBitfield'].mode()[0])
# origin_data[origin_data['RtpStateBitfield'] != origin_data['RtpStateBitfield'].astype('int8')]
# get_percentage(origin_data, 'RtpStateBitfield')

# DefaultBrowsersIdentifier
print_info("DefaultBrowsersIdentifier (95.14% Missing) - Fill missing values as -1 representing missing")
origin_data['DefaultBrowsersIdentifier'] = origin_data['DefaultBrowsersIdentifier'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['DefaultBrowsersIdentifier'] != origin_data['DefaultBrowsersIdentifier'].astype('int16')]
# get_percentage(origin_data, 'DefaultBrowsersIdentifier')

# AVProductStatesIdentifier
print_info("AVProductStatesIdentifier (0.41% Missing) - Fill missing values by mode")
origin_data['AVProductStatesIdentifier'] = origin_data['AVProductStatesIdentifier'].fillna(origin_data['AVProductStatesIdentifier'].mode()[0])
# origin_data[origin_data['AVProductStatesIdentifier'] != origin_data['AVProductStatesIdentifier'].astype('int32')]
# get_percentage(origin_data, 'AVProductStatesIdentifier')

# AVProductsInstalled
print_info("AVProductsInstalled (0.41% Missing) - Fill missing values by mode")
origin_data['AVProductsInstalled'] = origin_data['AVProductsInstalled'].fillna(origin_data['AVProductsInstalled'].mode()[0]).astype('int8')
# origin_data[origin_data['AVProductsInstalled'] != origin_data['AVProductsInstalled'].astype('int8')]
# get_percentage(origin_data, 'AVProductsInstalled')

# AVProductsEnabled
print_info("AVProductsEnabled (0.41% Missing) - Fill missing values by mode")
origin_data['AVProductsEnabled'] = origin_data['AVProductsEnabled'].fillna(origin_data['AVProductsEnabled'].mode()[0]).astype('int8')
# origin_data[origin_data['AVProductsEnabled'] != origin_data['AVProductsEnabled'].astype('int8')]
# get_percentage(origin_data, 'AVProductsEnabled')

# CityIdentifier
print_info("CityIdentifier (3.65% Missing & Highest Frequency) - Fill missing values as -1 representing missing")
origin_data['CityIdentifier'] = origin_data['CityIdentifier'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['CityIdentifier'] != origin_data['CityIdentifier'].astype('int32')]
# get_percentage(origin_data, 'CityIdentifier')

# OrganizationIdentifier
print_info("OrganizationIdentifier (30.84% Missing & Second Highest Frequency) - Fill missing values as -1 representing missing")
origin_data['OrganizationIdentifier'] = origin_data['OrganizationIdentifier'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['OrganizationIdentifier'] != origin_data['OrganizationIdentifier'].astype('int8')]
# get_percentage(origin_data, 'OrganizationIdentifier')

# GeoNameIdentifier
print_info("GeoNameIdentifier (0.00239% Missing) - Fill missing values by mode")
origin_data['GeoNameIdentifier'] = origin_data['GeoNameIdentifier'].fillna(origin_data['GeoNameIdentifier'].mode()[0])
# origin_data[origin_data['GeoNameIdentifier'] != origin_data['GeoNameIdentifier'].astype('int16')]
# get_percentage(origin_data, 'GeoNameIdentifier')

# OsBuildLab
print_info("OsBuildLab (0.000235% Missing) - Fill missing values by mode")
origin_data['OsBuildLab'] = origin_data['OsBuildLab'].fillna(origin_data['OsBuildLab'].mode()[0])
# get_percentage(origin_data, 'OsBuildLab')

# IsProtected
print_info("IsProtected (0.404% Missing) - Fill missing values by mode")
origin_data['IsProtected'] = origin_data['IsProtected'].fillna(origin_data['IsProtected'].mode()[0])
# origin_data[origin_data['IsProtected'] != origin_data['IsProtected'].astype('int8')]
# get_percentage(origin_data, 'IsProtected')

# PuaMode
print_info("PuaMode (99.97% Missing) - Fill missing values as unknown representing missing")
origin_data['PuaMode'] = origin_data['PuaMode'].cat.add_categories('unknown').fillna('unknown')
# get_percentage(origin_data, 'PuaMode')

# SMode
print_info("SMode (6.03% Missing & Second Highest Frequency) - Fill missing values as -1 representing missing")
origin_data['SMode'] = origin_data['SMode'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['SMode'] != origin_data['SMode'].astype('int8')]
# get_percentage(origin_data, 'SMode')

# IeVerIdentifier
print_info("IeVerIdentifier (0.66% Missing) - Fill missing values by mode")
origin_data['IeVerIdentifier'] = origin_data['IeVerIdentifier'].fillna(origin_data['IeVerIdentifier'].mode()[0])
# origin_data[origin_data['IeVerIdentifier'] != origin_data['IeVerIdentifier'].astype('int16')]
# get_percentage(origin_data, 'IeVerIdentifier')

# SmartScreen
print_info("SmartScreen (35.61% Missing) - Fill missing values as unknown representing missing")
origin_data['SmartScreen'] = origin_data['SmartScreen'].cat.add_categories('unknown').fillna('unknown')
# get_percentage(origin_data, 'SmartScreen')

# Firewall
print_info("Firewall (1.02% Missing) - Fill missing values by mode")
origin_data['Firewall'] = origin_data['Firewall'].fillna(origin_data['Firewall'].mode()[0])
# origin_data[origin_data['Firewall'] != origin_data['Firewall'].astype('int8')]
# get_percentage(origin_data, 'Firewall')

# UacLuaenable
print_info("UacLuaenable (0.12% Missing) - Fill missing values by mode")
origin_data['UacLuaenable'] = origin_data['UacLuaenable'].fillna(origin_data['UacLuaenable'].mode()[0])
# origin_data[origin_data['UacLuaenable'] != origin_data['UacLuaenable'].astype('int8')]
# get_percentage(origin_data, 'UacLuaenable')

# Census_OEMNameIdentifier
print_info("Census_OEMNameIdentifier (1.07% Missing) - Fill missing values by mode")
origin_data['Census_OEMNameIdentifier'] = origin_data['Census_OEMNameIdentifier'].fillna(origin_data['Census_OEMNameIdentifier'].mode()[0])
# origin_data[origin_data['Census_OEMNameIdentifier'] != origin_data['Census_OEMNameIdentifier'].astype('int16')]
# get_percentage(origin_data, 'Census_OEMNameIdentifier')

# Census_OEMModelIdentifier
print_info("Census_OEMModelIdentifier (1.15% Missing & Fifth Highest Freq & Highest Freq is 3.64%) - Fill missing values as -1 representing missing")
origin_data['Census_OEMModelIdentifier'] = origin_data['Census_OEMModelIdentifier'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['Census_OEMModelIdentifier'] != origin_data['Census_OEMModelIdentifier'].astype('int32')]
# get_percentage(origin_data, 'Census_OEMModelIdentifier')

# Census_ProcessorCoreCount
print_info("Census_ProcessorCoreCount (0.46% Missing) - Fill missing values by median/mode")
origin_data['Census_ProcessorCoreCount'] = origin_data['Census_ProcessorCoreCount'].fillna(origin_data['Census_ProcessorCoreCount'].median()).astype('int16')
# origin_data[origin_data['Census_ProcessorCoreCount'] != origin_data['Census_ProcessorCoreCount'].astype('int16')]
get_percentage(origin_data, 'Census_ProcessorCoreCount')

# Census_ProcessorManufacturerIdentifier
print_info("Census_ProcessorManufacturerIdentifier (0.46% Missing) - Fill missing values by mode")
origin_data['Census_ProcessorManufacturerIdentifier'] = origin_data['Census_ProcessorManufacturerIdentifier'].fillna(origin_data['Census_ProcessorManufacturerIdentifier'].mode()[0])
# origin_data[origin_data['Census_ProcessorManufacturerIdentifier'] != origin_data['Census_ProcessorManufacturerIdentifier'].astype('int8')]
# get_percentage(origin_data, 'Census_ProcessorManufacturerIdentifier')

# Census_ProcessorModelIdentifier
print_info("Census_ProcessorModelIdentifier (0.46% Missing) - Fill missing values by mode")
origin_data['Census_ProcessorModelIdentifier'] = origin_data['Census_ProcessorModelIdentifier'].fillna(origin_data['Census_ProcessorModelIdentifier'].mode()[0])
# origin_data[origin_data['Census_ProcessorModelIdentifier'] != origin_data['Census_ProcessorModelIdentifier'].astype('int16')]
# get_percentage(origin_data, 'Census_ProcessorModelIdentifier')

# Census_ProcessorClass
print_info("Census_ProcessorClass (99.59% Missing) - Fill missing values as unknown representing missing")
origin_data['Census_ProcessorClass'] = origin_data['Census_ProcessorClass'].cat.add_categories('unknown').fillna('unknown')
# get_percentage(origin_data, 'Census_ProcessorClass')

# Census_PrimaryDiskTotalCapacity
print_info("Census_PrimaryDiskTotalCapacity (0.59% Missing) - Fill missing values by median/mode")
origin_data['Census_PrimaryDiskTotalCapacity'] = origin_data['Census_PrimaryDiskTotalCapacity'].fillna(origin_data['Census_PrimaryDiskTotalCapacity'].median())
# get_percentage(origin_data, 'Census_PrimaryDiskTotalCapacity')

# Census_PrimaryDiskTypeName
print_info("Census_PrimaryDiskTypeName (0.14% Missing and UNKNOWN is a category with freq 4.02%) - Fill missing values by 'UNKNOWN'")
origin_data['Census_PrimaryDiskTypeName'] = origin_data['Census_PrimaryDiskTypeName'].fillna('UNKNOWN')
# get_percentage(origin_data, 'Census_PrimaryDiskTypeName')

# Census_SystemVolumeTotalCapacity
print_info("Census_SystemVolumeTotalCapacity (0.59% Missing) - Fill missing values by median")
origin_data['Census_SystemVolumeTotalCapacity'] = origin_data['Census_SystemVolumeTotalCapacity'].fillna(origin_data['Census_SystemVolumeTotalCapacity'].median()).astype('int32')
# origin_data[origin_data['Census_SystemVolumeTotalCapacity'] != origin_data['Census_SystemVolumeTotalCapacity'].astype('int32')]
# get_percentage(origin_data, 'Census_SystemVolumeTotalCapacity')

# Census_TotalPhysicalRAM
print_info("Census_TotalPhysicalRAM (0.903% Missing) - Fill missing values by median/mode")
origin_data['Census_TotalPhysicalRAM'] = origin_data['Census_TotalPhysicalRAM'].fillna(origin_data['Census_TotalPhysicalRAM'].median()).astype('int32')
# origin_data[origin_data['Census_TotalPhysicalRAM'] != origin_data['Census_TotalPhysicalRAM'].astype('int32')]
# get_percentage(origin_data, 'Census_TotalPhysicalRAM')

# Census_ChassisTypeName
print_info("Census_ChassisTypeName (0.00698% Missing and UNKNOWN is a category with freq 0.75%) - Fill missing values by 'UNKNOWN'")
origin_data['Census_ChassisTypeName'] = origin_data['Census_ChassisTypeName'].fillna('UNKNOWN')
# get_percentage(origin_data, 'Census_ChassisTypeName')

# Census_InternalPrimaryDiagonalDisplaySizeInInches
print_info("Census_InternalPrimaryDiagonalDisplaySizeInInches (0.53% Missing) - Fill missing values by median/mode")
origin_data['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = origin_data['Census_InternalPrimaryDiagonalDisplaySizeInInches'].fillna(origin_data['Census_InternalPrimaryDiagonalDisplaySizeInInches'].median())
# get_percentage(origin_data, 'Census_InternalPrimaryDiagonalDisplaySizeInInches')

# Census_InternalPrimaryDisplayResolutionHorizontal
print_info("Census_InternalPrimaryDisplayResolutionHorizontal (0.53% Missing) - Fill missing values by median/mode")
origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'] = origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'].fillna(origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'].median()).astype('int16')
# origin_data[origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'] != origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'].astype('int16')]
# get_percentage(origin_data, 'Census_InternalPrimaryDisplayResolutionHorizontal')

# Census_InternalPrimaryDisplayResolutionVertical
print_info("Census_InternalPrimaryDisplayResolutionVertical (0.53% Missing) - Fill missing values by median/mode")
origin_data['Census_InternalPrimaryDisplayResolutionVertical'] = origin_data['Census_InternalPrimaryDisplayResolutionVertical'].fillna(origin_data['Census_InternalPrimaryDisplayResolutionVertical'].median()).astype('int16')
# origin_data[origin_data['Census_InternalPrimaryDisplayResolutionVertical'] != origin_data['Census_InternalPrimaryDisplayResolutionVertical'].astype('int16')]
# get_percentage(origin_data, 'Census_InternalPrimaryDisplayResolutionVertical')

# Census_PowerPlatformRoleName
print_info("Census_PowerPlatformRoleName (0.000616% Missing and UNKNOWN is a category with freq 0.23%) - Fill missing values by 'UNKNOWN'")
origin_data['Census_PowerPlatformRoleName'] = origin_data['Census_PowerPlatformRoleName'].fillna('UNKNOWN')
# get_percentage(origin_data, 'Census_PowerPlatformRoleName')

# Census_InternalBatteryType
print_info("Census_InternalBatteryType (71.05% Missing) - Fill missing values as unknown representing missing")
origin_data['Census_InternalBatteryType'] = origin_data['Census_InternalBatteryType'].cat.add_categories('unknown').fillna('unknown')
# get_percentage(origin_data, 'Census_InternalBatteryType')

# Census_InternalBatteryNumberOfCharges
print_info("Census_InternalBatteryNumberOfCharges (3.01% Missing) - Fill missing values by median/mode")
origin_data['Census_InternalBatteryNumberOfCharges'] = origin_data['Census_InternalBatteryNumberOfCharges'].fillna(origin_data['Census_InternalBatteryNumberOfCharges'].median())
# get_percentage(origin_data, 'Census_InternalBatteryNumberOfCharges')

# Census_OSInstallLanguageIdentifier
print_info("Census_OSInstallLanguageIdentifier (0.67% Missing) - Fill missing values by mode")
origin_data['Census_OSInstallLanguageIdentifier'] = origin_data['Census_OSInstallLanguageIdentifier'].fillna(origin_data['Census_OSInstallLanguageIdentifier'].mode()[0])
# origin_data[origin_data['Census_OSInstallLanguageIdentifier'] != origin_data['Census_OSInstallLanguageIdentifier'].astype('int16')]
# get_percentage(origin_data, 'Census_OSInstallLanguageIdentifier')

# Census_IsFlightingInternal
print_info("Census_IsFlightingInternal (83.04% Missing) - Fill missing values as -1 representing missing")
origin_data['Census_IsFlightingInternal'] = origin_data['Census_IsFlightingInternal'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['Census_IsFlightingInternal'] != origin_data['Census_IsFlightingInternal'].astype('int8')]
# get_percentage(origin_data, 'Census_IsFlightingInternal')

# Census_IsFlightsDisabled
print_info("Census_IsFlightsDisabled (1.8% Missing) - Fill missing values by mode")
origin_data['Census_IsFlightsDisabled'] = origin_data['Census_IsFlightsDisabled'].fillna(origin_data['Census_IsFlightsDisabled'].mode()[0])
# origin_data[origin_data['Census_IsFlightsDisabled'] != origin_data['Census_IsFlightsDisabled'].astype('int8')]
# get_percentage(origin_data, 'Census_IsFlightsDisabled')

# Census_ThresholdOptIn
print_info("Census_ThresholdOptIn (63.52% Missing) - Fill missing values as -1 representing missing")
origin_data['Census_ThresholdOptIn'] = origin_data['Census_ThresholdOptIn'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['Census_ThresholdOptIn'] != origin_data['Census_ThresholdOptIn'].astype('int8')]
# get_percentage(origin_data, 'Census_ThresholdOptIn')

# Census_FirmwareManufacturerIdentifier
print_info("Census_FirmwareManufacturerIdentifier (2.05% Missing) - Fill missing values by mode")
origin_data['Census_FirmwareManufacturerIdentifier'] = origin_data['Census_FirmwareManufacturerIdentifier'].fillna(origin_data['Census_FirmwareManufacturerIdentifier'].mode()[0])
# origin_data[origin_data['Census_FirmwareManufacturerIdentifier'] != origin_data['Census_FirmwareManufacturerIdentifier'].astype('int16')]
# get_percentage(origin_data, 'Census_FirmwareManufacturerIdentifier')

# Census_FirmwareVersionIdentifier
print_info("Census_FirmwareVersionIdentifier (1.79% Missing with highest freq) - Fill missing values as -1 representing missing")
origin_data['Census_FirmwareVersionIdentifier'] = origin_data['Census_FirmwareVersionIdentifier'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['Census_FirmwareVersionIdentifier'] != origin_data['Census_FirmwareVersionIdentifier'].astype('int32')]
# get_percentage(origin_data, 'Census_FirmwareVersionIdentifier')

# Census_IsWIMBootEnabled
print_info("Census_IsWIMBootEnabled (63.44% Missing) - Fill missing values as -1 representing missing")
origin_data['Census_IsWIMBootEnabled'] = origin_data['Census_IsWIMBootEnabled'].cat.add_categories(-1).fillna(-1)
# origin_data[origin_data['Census_IsWIMBootEnabled'] != origin_data['Census_IsWIMBootEnabled'].astype('int8')]
# get_percentage(origin_data, 'Census_IsWIMBootEnabled')

# Census_IsVirtualDevice
print_info("Census_IsVirtualDevice (2.05% Missing) - Fill missing values by mode")
origin_data['Census_IsVirtualDevice'] = origin_data['Census_IsVirtualDevice'].fillna(origin_data['Census_IsVirtualDevice'].mode()[0])
# origin_data[origin_data['Census_IsVirtualDevice'] != origin_data['Census_IsVirtualDevice'].astype('int8')]
# get_percentage(origin_data, 'Census_IsVirtualDevice')

# Census_IsAlwaysOnAlwaysConnectedCapable
print_info("Census_IsAlwaysOnAlwaysConnectedCapable (0.8% Missing) - Fill missing values by mode")
origin_data['Census_IsAlwaysOnAlwaysConnectedCapable'] = origin_data['Census_IsAlwaysOnAlwaysConnectedCapable'].fillna(origin_data['Census_IsAlwaysOnAlwaysConnectedCapable'].mode()[0])
# origin_data[origin_data['Census_IsAlwaysOnAlwaysConnectedCapable'] != origin_data['Census_IsAlwaysOnAlwaysConnectedCapable'].astype('int8')]
# get_percentage(origin_data, 'Census_IsAlwaysOnAlwaysConnectedCapable')

# Wdft_IsGamer
print_info("Wdft_IsGamer (3.4% Missing) - Fill missing values by mode")
origin_data['Wdft_IsGamer'] = origin_data['Wdft_IsGamer'].fillna(origin_data['Wdft_IsGamer'].mode()[0])
# origin_data[origin_data['Wdft_IsGamer'] != origin_data['Wdft_IsGamer'].astype('int8')]
# get_percentage(origin_data, 'Wdft_IsGamer')

# Wdft_RegionIdentifier
print_info("Wdft_RegionIdentifier (3.4% Missing) - Fill missing values by mode")
origin_data['Wdft_RegionIdentifier'] = origin_data['Wdft_RegionIdentifier'].fillna(origin_data['Wdft_RegionIdentifier'].mode()[0])
# origin_data[origin_data['Wdft_RegionIdentifier'] != origin_data['Wdft_RegionIdentifier'].astype('int8')]
# get_percentage(origin_data, 'Wdft_RegionIdentifier')


# origin_data.info()
# origin_data.isnull().sum()

# Invalid Values -----------------------------------------------------------
print_title('Invalid Values')

# SmartScreen
print_info("SmartScreen (Different labels of same word with different case) - Lowercase values")
origin_data['SmartScreen'] = origin_data['SmartScreen'].apply(lambda x: x.lower()).astype('category')
origin_data['SmartScreen'] = origin_data['SmartScreen'].replace('00000000', 'unknown').replace('0', 'unknown')
# get_percentage(origin_data, 'SmartScreen')

# UacLuaenable
print_info("SmartScreen (invalid values which are not 0/1) - Convert invalid  values to 1")
origin_data['UacLuaenable'] = origin_data['UacLuaenable'].astype('int').apply(lambda x: 0 if x == 0 else 1).astype('category')
# get_percentage(origin_data, 'UacLuaenable')

origin_data[['Census_InternalBatteryNumberOfCharges']].info()

# Census_InternalPrimaryDisplayResolutionHorizontal
print_info("Census_InternalPrimaryDisplayResolutionHorizontal (invalid values as -1) - Convert invalid values -1 to median/mode")
origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'] = origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'].replace(-1, origin_data['Census_InternalPrimaryDisplayResolutionHorizontal'].median())
# get_percentage(origin_data, 'Census_InternalPrimaryDisplayResolutionHorizontal')

# Census_InternalPrimaryDisplayResolutionVertical
print_info("Census_InternalPrimaryDisplayResolutionVertical (invalid values as -1) - Convert invalid values -1 to median/mode")
origin_data['Census_InternalPrimaryDisplayResolutionVertical'] = origin_data['Census_InternalPrimaryDisplayResolutionVertical'].replace(-1, origin_data['Census_InternalPrimaryDisplayResolutionVertical'].median())
# get_percentage(origin_data, 'Census_InternalPrimaryDisplayResolutionVertical')

# Census_InternalBatteryNumberOfCharges
print_info("Census_InternalBatteryNumberOfCharges (25.38% are 4294967296 which represents inf in Python) - Convert invalid values 4294967296 to median/mode")
origin_data['Census_InternalBatteryNumberOfCharges'] = origin_data['Census_InternalBatteryNumberOfCharges'].replace(4294967296, origin_data['Census_InternalBatteryNumberOfCharges'].median()).astype('uint16')
# origin_data[origin_data['Census_InternalBatteryNumberOfCharges'] != origin_data['Census_InternalBatteryNumberOfCharges'].astype('uint16')]
# get_percentage(origin_data, 'Census_InternalBatteryNumberOfCharges')

# Identify and Handle Outliers For Numeric Attributes --------------------------
print_title('Identify and Handle Outliers')

# AVProductsInstalled
print_info("AVProductsInstalled - Nothing")

# AVProductsEnabled
print_info("AVProductsEnabled - Nothing")

# Census_ProcessorCoreCount @TODO

# Census_PrimaryDiskTotalCapacity @TODO
# print_info("Remove rows with 'Census_PrimaryDiskTotalCapacity' outlier values") # 8160436813824.0 6523912192000.0
# print("The two extremely large outliers: {}".format([i for i in origin_data['Census_PrimaryDiskTotalCapacity'] if i > (10**12)]))
# origin_data = origin_data[origin_data['Census_PrimaryDiskTotalCapacity'] < (10**12)]
# print("The max after converting outliers: {}".format(origin_data['Census_PrimaryDiskTotalCapacity'].max()))

# Census_SystemVolumeTotalCapacity @TODO
# origin_data['Census_SystemVolumeTotalCapacity'].sort_values()
# df = pd.read_csv(CHECK_DATA_DIRECTORY + '/check_category_counts/Census_SystemVolumeTotalCapacity.csv')
# df.sort_values('Label')

# Census_TotalPhysicalRAM @TODO

# Census_InternalPrimaryDiagonalDisplaySizeInInches @TODO

# Census_InternalPrimaryDisplayResolutionHorizontal @TODO

# Census_InternalPrimaryDisplayResolutionVertical @TODO

# Census_InternalBatteryNumberOfCharges @TODO

# Binning --------------------------------------------------------------
